{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\audit-software-frontend\\\\src\\\\InteractiveAnnotatedImage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InteractiveAnnotatedImage({\n  imagePath,\n  blobs,\n  onSelectionComplete,\n  onLabelVariationsUpdate\n}) {\n  _s();\n  const imageRef = useRef(null);\n  const [scaleFactor, setScaleFactor] = useState(1);\n  const [selectedPairs, setSelectedPairs] = useState([]);\n  const [currentPair, setCurrentPair] = useState([]);\n  const [selectionCount, setSelectionCount] = useState({});\n  const [labelVariations, setLabelVariations] = useState({}); // Store label variations\n\n  // Include a mechanism to update label variations upon selecting a pair\n  useEffect(() => {\n    if (currentPair.length === 2) {\n      const labelIndex = currentPair[0];\n      const promptVariations = window.prompt(\"Enter any variations for this label, separated by commas:\");\n      const variations = promptVariations ? promptVariations.split(',').map(variation => variation.trim()) : [];\n      setLabelVariations(prev => ({\n        ...prev,\n        [labelIndex]: variations\n      }));\n    }\n  }, [currentPair.length === 2]);\n  useEffect(() => {\n    onSelectionComplete(selectedPairs);\n    // Only call onLabelVariationsUpdate if it's defined\n    if (onLabelVariationsUpdate) {\n      onLabelVariationsUpdate(labelVariations); // Update parent component with label variations\n    }\n  }, [selectedPairs, labelVariations, onSelectionComplete, onLabelVariationsUpdate]);\n  useEffect(() => {\n    const calculateScaleFactor = () => {\n      if (imageRef.current) {\n        const naturalWidth = imageRef.current.naturalWidth;\n        const displayWidth = imageRef.current.clientWidth;\n        if (naturalWidth && displayWidth) {\n          setScaleFactor(displayWidth / naturalWidth);\n        }\n      }\n    };\n    if (imageRef.current) {\n      if (imageRef.current.complete) {\n        calculateScaleFactor();\n      } else {\n        imageRef.current.onload = calculateScaleFactor;\n      }\n    }\n    window.addEventListener('resize', calculateScaleFactor);\n    return () => window.removeEventListener('resize', calculateScaleFactor);\n  }, [imagePath]);\n  useEffect(() => {\n    onSelectionComplete(selectedPairs);\n  }, [selectedPairs, onSelectionComplete]);\n  const addSelection = index => {\n    if (selectionCount[index] >= 2) return;\n    const updatedCurrentPair = [...currentPair, index];\n    const updatedSelectionCount = {\n      ...selectionCount,\n      [index]: (selectionCount[index] || 0) + 1\n    };\n    if (updatedCurrentPair.length === 2) {\n      setSelectedPairs([...selectedPairs, updatedCurrentPair]);\n      setCurrentPair([]);\n    } else {\n      setCurrentPair(updatedCurrentPair);\n    }\n    setSelectionCount(updatedSelectionCount);\n  };\n  const undoSelection = () => {\n    let lastSelectedIndex;\n    if (currentPair.length > 0) {\n      lastSelectedIndex = currentPair.pop();\n      setCurrentPair([...currentPair]);\n    } else if (selectedPairs.length > 0) {\n      const lastPair = selectedPairs[selectedPairs.length - 1];\n      lastSelectedIndex = lastPair.pop();\n      if (lastPair.length === 0) {\n        selectedPairs.pop();\n      } else {\n        selectedPairs[selectedPairs.length - 1] = lastPair;\n      }\n      setSelectedPairs([...selectedPairs]);\n    }\n    if (lastSelectedIndex !== undefined) {\n      const updatedSelectionCount = {\n        ...selectionCount\n      };\n      if (updatedSelectionCount[lastSelectedIndex] > 0) {\n        updatedSelectionCount[lastSelectedIndex]--;\n      }\n      setSelectionCount(updatedSelectionCount);\n    }\n  };\n  const getLabel = index => {\n    const occurrences = selectedPairs.flat().filter(i => i === index).length + (currentPair.includes(index) ? 1 : 0);\n    let label = '';\n    selectedPairs.forEach((pair, pairIndex) => {\n      pair.forEach((elementIndex, elementPosition) => {\n        if (elementIndex === index) {\n          label += `${pairIndex + 1}${elementPosition === 0 ? 'A' : 'B'} `;\n        }\n      });\n    });\n    if (currentPair.includes(index) && occurrences < 2) {\n      label += `${selectedPairs.length + 1}A `;\n    }\n    return label.trim();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      display: 'inline-block'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: undoSelection,\n      style: {\n        position: 'absolute',\n        right: 0,\n        top: 0,\n        zIndex: 10\n      },\n      children: \"Undo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      ref: imageRef,\n      src: imagePath,\n      alt: \"Annotated Invoice\",\n      style: {\n        maxWidth: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%'\n      },\n      children: blobs.map((blob, index) => {\n        const [x, y, width, height] = blob.coordinates.map(coord => coord * scaleFactor);\n        const isSelected = selectedPairs.flat().includes(index) || currentPair.includes(index);\n        const label = getLabel(index);\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          onClick: () => addSelection(index),\n          children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            fill: \"none\",\n            stroke: isSelected ? 'blue' : 'red',\n            strokeWidth: \"2\",\n            style: {\n              pointerEvents: 'all',\n              cursor: 'pointer'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this), label && /*#__PURE__*/_jsxDEV(\"text\", {\n            x: x + 5,\n            y: y + 20,\n            fill: \"blue\",\n            fontSize: \"15\",\n            style: {\n              pointerEvents: 'none'\n            },\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(InteractiveAnnotatedImage, \"nFaYiQTF3k5l2YNi2Z15FsidZDg=\");\n_c = InteractiveAnnotatedImage;\nexport default InteractiveAnnotatedImage;\nvar _c;\n$RefreshReg$(_c, \"InteractiveAnnotatedImage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","InteractiveAnnotatedImage","imagePath","blobs","onSelectionComplete","onLabelVariationsUpdate","_s","imageRef","scaleFactor","setScaleFactor","selectedPairs","setSelectedPairs","currentPair","setCurrentPair","selectionCount","setSelectionCount","labelVariations","setLabelVariations","length","labelIndex","promptVariations","window","prompt","variations","split","map","variation","trim","prev","calculateScaleFactor","current","naturalWidth","displayWidth","clientWidth","complete","onload","addEventListener","removeEventListener","addSelection","index","updatedCurrentPair","updatedSelectionCount","undoSelection","lastSelectedIndex","pop","lastPair","undefined","getLabel","occurrences","flat","filter","i","includes","label","forEach","pair","pairIndex","elementIndex","elementPosition","style","position","display","children","onClick","right","top","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","ref","src","alt","maxWidth","left","width","height","blob","x","y","coordinates","coord","isSelected","fill","stroke","strokeWidth","pointerEvents","cursor","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/jason/audit-software-frontend/src/InteractiveAnnotatedImage.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\nfunction InteractiveAnnotatedImage({ imagePath, blobs, onSelectionComplete,  onLabelVariationsUpdate }) {\r\n  const imageRef = useRef(null);\r\n  const [scaleFactor, setScaleFactor] = useState(1);\r\n  const [selectedPairs, setSelectedPairs] = useState([]);\r\n  const [currentPair, setCurrentPair] = useState([]);\r\n  const [selectionCount, setSelectionCount] = useState({});\r\n  const [labelVariations, setLabelVariations] = useState({}); // Store label variations\r\n\r\n  // Include a mechanism to update label variations upon selecting a pair\r\n  useEffect(() => {\r\n    if (currentPair.length === 2) {\r\n      const labelIndex = currentPair[0];\r\n      const promptVariations = window.prompt(\"Enter any variations for this label, separated by commas:\");\r\n      const variations = promptVariations ? promptVariations.split(',').map(variation => variation.trim()) : [];\r\n      setLabelVariations(prev => ({ ...prev, [labelIndex]: variations }));\r\n    }\r\n  }, [currentPair.length === 2]);\r\n\r\n  useEffect(() => {\r\n    onSelectionComplete(selectedPairs);\r\n    // Only call onLabelVariationsUpdate if it's defined\r\n    if (onLabelVariationsUpdate) {\r\n      onLabelVariationsUpdate(labelVariations); // Update parent component with label variations\r\n    }\r\n  }, [selectedPairs, labelVariations, onSelectionComplete, onLabelVariationsUpdate]);\r\n\r\n  useEffect(() => {\r\n    const calculateScaleFactor = () => {\r\n      if (imageRef.current) {\r\n        const naturalWidth = imageRef.current.naturalWidth;\r\n        const displayWidth = imageRef.current.clientWidth;\r\n        if (naturalWidth && displayWidth) {\r\n          setScaleFactor(displayWidth / naturalWidth);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (imageRef.current) {\r\n      if (imageRef.current.complete) {\r\n        calculateScaleFactor();\r\n      } else {\r\n        imageRef.current.onload = calculateScaleFactor;\r\n      }\r\n    }\r\n\r\n    window.addEventListener('resize', calculateScaleFactor);\r\n    return () => window.removeEventListener('resize', calculateScaleFactor);\r\n  }, [imagePath]);\r\n\r\n  useEffect(() => {\r\n    onSelectionComplete(selectedPairs);\r\n  }, [selectedPairs, onSelectionComplete]);\r\n\r\n  const addSelection = (index) => {\r\n    if (selectionCount[index] >= 2) return;\r\n\r\n    const updatedCurrentPair = [...currentPair, index];\r\n    const updatedSelectionCount = { ...selectionCount, [index]: (selectionCount[index] || 0) + 1 };\r\n\r\n    if (updatedCurrentPair.length === 2) {\r\n      setSelectedPairs([...selectedPairs, updatedCurrentPair]);\r\n      setCurrentPair([]);\r\n    } else {\r\n      setCurrentPair(updatedCurrentPair);\r\n    }\r\n    setSelectionCount(updatedSelectionCount);\r\n  };\r\n\r\n  const undoSelection = () => {\r\n    let lastSelectedIndex;\r\n    if (currentPair.length > 0) {\r\n      lastSelectedIndex = currentPair.pop();\r\n      setCurrentPair([...currentPair]);\r\n    } else if (selectedPairs.length > 0) {\r\n      const lastPair = selectedPairs[selectedPairs.length - 1];\r\n      lastSelectedIndex = lastPair.pop();\r\n      if (lastPair.length === 0) {\r\n        selectedPairs.pop();\r\n      } else {\r\n        selectedPairs[selectedPairs.length - 1] = lastPair;\r\n      }\r\n      setSelectedPairs([...selectedPairs]);\r\n    }\r\n\r\n    if (lastSelectedIndex !== undefined) {\r\n      const updatedSelectionCount = { ...selectionCount };\r\n      if (updatedSelectionCount[lastSelectedIndex] > 0) {\r\n        updatedSelectionCount[lastSelectedIndex]--;\r\n      }\r\n      setSelectionCount(updatedSelectionCount);\r\n    }\r\n  };\r\n\r\n  const getLabel = (index) => {\r\n    const occurrences = selectedPairs.flat().filter(i => i === index).length + (currentPair.includes(index) ? 1 : 0);\r\n    let label = '';\r\n\r\n    selectedPairs.forEach((pair, pairIndex) => {\r\n      pair.forEach((elementIndex, elementPosition) => {\r\n        if (elementIndex === index) {\r\n          label += `${pairIndex + 1}${elementPosition === 0 ? 'A' : 'B'} `;\r\n        }\r\n      });\r\n    });\r\n\r\n    if (currentPair.includes(index) && occurrences < 2) {\r\n      label += `${selectedPairs.length + 1}A `;\r\n    }\r\n\r\n    return label.trim();\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: 'relative', display: 'inline-block' }}>\r\n      <button onClick={undoSelection} style={{ position: 'absolute', right: 0, top: 0, zIndex: 10 }}>Undo</button>\r\n      <img ref={imageRef} src={imagePath} alt=\"Annotated Invoice\" style={{ maxWidth: '100%' }} />\r\n      <svg style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\r\n        {blobs.map((blob, index) => {\r\n          const [x, y, width, height] = blob.coordinates.map(coord => coord * scaleFactor);\r\n          const isSelected = selectedPairs.flat().includes(index) || currentPair.includes(index);\r\n          const label = getLabel(index);\r\n\r\n          return (\r\n            <g key={index} onClick={() => addSelection(index)}>\r\n              <rect\r\n                x={x} y={y} width={width} height={height}\r\n                fill=\"none\" stroke={isSelected ? 'blue' : 'red'} strokeWidth=\"2\"\r\n                style={{ pointerEvents: 'all', cursor: 'pointer' }}\r\n              />\r\n              {label && (\r\n                <text\r\n                  x={x + 5} y={y + 20}\r\n                  fill=\"blue\" fontSize=\"15\"\r\n                  style={{ pointerEvents: 'none' }}\r\n                >\r\n                  {label}\r\n                </text>\r\n              )}\r\n            </g>\r\n          );\r\n        })}\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InteractiveAnnotatedImage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}