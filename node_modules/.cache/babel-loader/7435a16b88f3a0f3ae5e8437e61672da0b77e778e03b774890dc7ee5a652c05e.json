{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\audit-software-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport UploadForm from './UploadForm';\nimport FetchAnnouncementsForm from './FetchAnnouncementsForm';\nimport DirectoryInputForm from './DirectoryInputForm';\nimport InteractiveAnnotatedImage from './InteractiveAnnotatedImage';\nimport DataTable from './DataTable';\nimport './App.css';\nimport logo from './favicon.png';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [processedImageInfo, setProcessedImageInfo] = useState({\n    filename: '',\n    blobs: [],\n    mergedTexts: []\n  });\n  const [selectedPairs, setSelectedPairs] = useState([]);\n  const [directoryPath, setDirectoryPath] = useState(''); // Add directoryPath to state\n  const [labelVariations, setLabelVariations] = useState({});\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState({\n    current: 0,\n    total: 1,\n    completed: false\n  });\n  const [processedData, setProcessedData] = useState([]);\n  const fetchProgress = useCallback(() => {\n    axios.get('/progress').then(response => {\n      const {\n        current,\n        total\n      } = response.data;\n      setProgress(prevProgress => ({\n        ...prevProgress,\n        current,\n        total,\n        completed: current >= total\n      }));\n      if (current >= total) {\n        setIsProcessing(false);\n      }\n    }).catch(error => console.error(\"Failed to fetch progress\", error));\n  }, []);\n  useEffect(() => {\n    let interval = null;\n    if (isProcessing) {\n      interval = setInterval(fetchProgress, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isProcessing, fetchProgress]);\n  const handleDirectorySubmit = async directoryPath => {\n    try {\n      setDirectoryPath(directoryPath);\n\n      // Adjust the endpoint as necessary. This should match your Flask route.\n      const response = await axios.post('/process-directory', {\n        directory: directoryPath\n      });\n      // Assuming the response contains both the filename and blobs data\n      // Update this according to the actual structure of your response\n      // Assuming your Flask endpoint now also returns merged texts along with blobs\n      const {\n        filename,\n        blobs,\n        mergedTexts\n      } = response.data;\n      setProcessedImageInfo({\n        filename,\n        blobs,\n        mergedTexts\n      }); // Update state with filename, blobs, and mergedTexts\n    } catch (error) {\n      console.error(\"Error processing directory:\", error);\n    }\n  };\n  const processedImagePath = processedImageInfo.filename ? `/processed-images/${processedImageInfo.filename}` : '';\n  console.log(\"Processed Image Path:\", processedImagePath);\n  console.log(\"Processed Image Info:\", processedImageInfo);\n  console.log(\"Selected Pairs:\", selectedPairs);\n  console.log(\"Blobs:\", processedImageInfo.blobs);\n  console.log(\"Merged Texts:\", processedImageInfo.mergedTexts);\n  const handleProcessSelection = async () => {\n    setIsProcessing(true);\n\n    // Assuming `selectedPairs` contains the indexes of selected pairs,\n    // and `processedImageInfo.blobs` contains the blobs data\n    try {\n      const response = await axios.post('/process-selected-pairs', {\n        directoryPath,\n        selectedPairs,\n        blobs: processedImageInfo.blobs,\n        mergedTexts: processedImageInfo.mergedTexts,\n        labelVariations // Send label variations to the backend\n      });\n      console.log(response.data); // Handle response as needed\n      fetchProgress();\n    } catch (error) {\n      console.error(\"Error sending selections:\", error);\n      setIsProcessing(false);\n    }\n  };\n  useEffect(() => {\n    if (progress.completed && directoryPath) {\n      const queryParams = new URLSearchParams({\n        directory: directoryPath\n      });\n      axios.get(`/get-processed-info?${queryParams}`).then(response => {\n        setProcessedData(response.data);\n      });\n    }\n  }, [progress.completed, directoryPath]);\n\n  // Dynamically generate columns from processedData\n  const columns = React.useMemo(() => {\n    if (processedData.length > 0) {\n      let cols = Object.keys(processedData[0]).map(key => ({\n        Header: key.charAt(0).toUpperCase() + key.slice(1),\n        accessor: key\n      }));\n\n      // Find the 'File URL' column\n      const urlColumn = cols.find(c => c.accessor === 'File URL');\n      // Filter out the 'File URL' column from the original columns\n      cols = cols.filter(c => c.accessor !== 'File URL');\n      // Add the 'File URL' column at the end\n      cols.push(urlColumn);\n      return cols;\n    }\n    return [];\n  }, [processedData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Potato Audit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UploadForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FetchAnnouncementsForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DirectoryInputForm, {\n      onDirectorySubmit: handleDirectorySubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"invoice-image-container\",\n      children: processedImageInfo.filename && /*#__PURE__*/_jsxDEV(InteractiveAnnotatedImage, {\n        imagePath: `/processed-images/${processedImageInfo.filename}`,\n        blobs: processedImageInfo.blobs,\n        mergedTexts: processedImageInfo.mergedTexts,\n        onSelectionComplete: setSelectedPairs,\n        onLabelVariationsUpdate: setLabelVariations // Handle label variations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), processedImageInfo.filename && selectedPairs.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleProcessSelection,\n      children: \"Process Selections\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), (progress.current > 0 || progress.completed) && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Processing Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n        value: progress.current,\n        max: progress.total\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [progress.current, \" of \", progress.total, \" files processed\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-container\",\n      children: progress.completed && /*#__PURE__*/_jsxDEV(DataTable, {\n        columns: columns,\n        data: processedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"jP29+9lRc50BwgcMCN1eYlWis4U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","axios","UploadForm","FetchAnnouncementsForm","DirectoryInputForm","InteractiveAnnotatedImage","DataTable","logo","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","processedImageInfo","setProcessedImageInfo","filename","blobs","mergedTexts","selectedPairs","setSelectedPairs","directoryPath","setDirectoryPath","labelVariations","setLabelVariations","isProcessing","setIsProcessing","progress","setProgress","current","total","completed","processedData","setProcessedData","fetchProgress","get","then","response","data","prevProgress","catch","error","console","interval","setInterval","clearInterval","handleDirectorySubmit","post","directory","processedImagePath","log","handleProcessSelection","queryParams","URLSearchParams","columns","useMemo","length","cols","Object","keys","map","key","Header","charAt","toUpperCase","slice","accessor","urlColumn","find","c","filter","push","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onDirectorySubmit","imagePath","onSelectionComplete","onLabelVariationsUpdate","onClick","value","max","_c","$RefreshReg$"],"sources":["C:/Users/jason/audit-software-frontend/src/App.js"],"sourcesContent":["// App.js\nimport React, { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport UploadForm from './UploadForm';\nimport FetchAnnouncementsForm from './FetchAnnouncementsForm';\nimport DirectoryInputForm from './DirectoryInputForm';\nimport InteractiveAnnotatedImage from './InteractiveAnnotatedImage';\nimport DataTable from './DataTable';\nimport './App.css';\nimport logo from './favicon.png'; \n\n\n\nfunction App() {\n    const [processedImageInfo, setProcessedImageInfo] = useState({ filename: '', blobs: [], mergedTexts: []});\n    const [selectedPairs, setSelectedPairs] = useState([]);\n    const [directoryPath, setDirectoryPath] = useState(''); // Add directoryPath to state\n    const [labelVariations, setLabelVariations] = useState({});\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [progress, setProgress] = useState({ current: 0, total: 1, completed: false });\n    const [processedData, setProcessedData] = useState([]);\n\n\n    const fetchProgress = useCallback(() => {\n        axios.get('/progress')\n            .then(response => {\n                const { current, total } = response.data;\n                setProgress(prevProgress => ({\n                  ...prevProgress,\n                  current,\n                  total,\n                  completed: current >= total\n                }));\n                if (current >= total) {\n                    setIsProcessing(false);\n                }\n            })\n            .catch(error => console.error(\"Failed to fetch progress\", error));\n    }, []);\n\n\n    useEffect(() => {\n        let interval = null;\n        if (isProcessing) {\n            interval = setInterval(fetchProgress, 1000);\n        }\n        return () => clearInterval(interval);\n    }, [isProcessing, fetchProgress]);\n\n\n\n    const handleDirectorySubmit = async (directoryPath) => {\n        try {\n            setDirectoryPath(directoryPath);\n\n            // Adjust the endpoint as necessary. This should match your Flask route.\n            const response = await axios.post('/process-directory', { directory: directoryPath });\n            // Assuming the response contains both the filename and blobs data\n            // Update this according to the actual structure of your response\n            // Assuming your Flask endpoint now also returns merged texts along with blobs\n            const { filename, blobs, mergedTexts } = response.data; \n            setProcessedImageInfo({ filename, blobs, mergedTexts }); // Update state with filename, blobs, and mergedTexts\n        } catch (error) {\n            console.error(\"Error processing directory:\", error);\n        }\n    };\n\n    const processedImagePath = processedImageInfo.filename ? `/processed-images/${processedImageInfo.filename}` : '';\n    console.log(\"Processed Image Path:\", processedImagePath);\n    console.log(\"Processed Image Info:\", processedImageInfo);\n    \n    console.log(\"Selected Pairs:\", selectedPairs);\n    console.log(\"Blobs:\", processedImageInfo.blobs);\n    console.log(\"Merged Texts:\", processedImageInfo.mergedTexts);\n\n    const handleProcessSelection = async () => {\n        setIsProcessing(true);\n\n        // Assuming `selectedPairs` contains the indexes of selected pairs,\n        // and `processedImageInfo.blobs` contains the blobs data\n        try {\n            const response = await axios.post('/process-selected-pairs', {\n                directoryPath,\n                selectedPairs,\n                blobs: processedImageInfo.blobs,\n                mergedTexts: processedImageInfo.mergedTexts, \n                labelVariations, // Send label variations to the backend\n\n            });\n            console.log(response.data); // Handle response as needed\n            fetchProgress();\n\n        } catch (error) {\n            console.error(\"Error sending selections:\", error);\n            setIsProcessing(false);\n\n        }\n    };\n    \n\n    useEffect(() => {\n        if (progress.completed && directoryPath) {\n            const queryParams = new URLSearchParams({ directory: directoryPath });\n            axios.get(`/get-processed-info?${queryParams}`).then((response) => {\n                setProcessedData(response.data);\n            });\n        }\n    }, [progress.completed, directoryPath]);\n    \n    \n      // Dynamically generate columns from processedData\n      const columns = React.useMemo(() => {\n        if (processedData.length > 0) {\n            let cols = Object.keys(processedData[0]).map(key => ({\n              Header: key.charAt(0).toUpperCase() + key.slice(1),\n              accessor: key,\n            }));\n        \n            // Find the 'File URL' column\n            const urlColumn = cols.find(c => c.accessor === 'File URL');\n            // Filter out the 'File URL' column from the original columns\n            cols = cols.filter(c => c.accessor !== 'File URL');\n            // Add the 'File URL' column at the end\n            cols.push(urlColumn);\n            \n            return cols;\n          }\n          return [];\n      }, [processedData]);\n\n\n\n    return (\n        <div className=\"App\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1>Potato Audit</h1>\n            <UploadForm />\n            <FetchAnnouncementsForm />\n            <DirectoryInputForm onDirectorySubmit={handleDirectorySubmit} />\n\n            <div className=\"invoice-image-container\">\n                {processedImageInfo.filename && (\n                    <InteractiveAnnotatedImage\n                        imagePath={`/processed-images/${processedImageInfo.filename}`}\n                        blobs={processedImageInfo.blobs}\n                        mergedTexts={processedImageInfo.mergedTexts}\n                        onSelectionComplete={setSelectedPairs}\n                        onLabelVariationsUpdate={setLabelVariations} // Handle label variations\n                        \n                    />\n                )}\n            </div>\n            \n            {processedImageInfo.filename && selectedPairs.length > 0 && (\n            <button onClick={handleProcessSelection}>Process Selections</button>\n            )}\n\n            {(progress.current > 0 || progress.completed) && (\n                <>\n                    <h2>Processing Progress</h2>\n                    <progress value={progress.current} max={progress.total}></progress>\n                    <p>{progress.current} of {progress.total} files processed</p>\n                </>\n            )}\n\n        <div className=\"table-container\">\n            {progress.completed && (\n                <DataTable columns={columns} data={processedData} />\n            )}\n        </div>\n\n        </div>\n        \n\n    \n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}