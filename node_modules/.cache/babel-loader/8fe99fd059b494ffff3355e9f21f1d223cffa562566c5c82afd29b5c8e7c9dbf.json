{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\audit-software-frontend\\\\src\\\\InteractiveAnnotatedImage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InteractiveAnnotatedImage({\n  imagePath,\n  blobs\n}) {\n  _s();\n  const imageRef = useRef(null);\n  const [scaleFactor, setScaleFactor] = useState(1);\n  useEffect(() => {\n    const calculateScaleFactor = () => {\n      const naturalWidth = imageRef.current.naturalWidth;\n      const displayWidth = imageRef.current.clientWidth;\n      if (naturalWidth > 0) {\n        setScaleFactor(displayWidth / naturalWidth);\n      }\n    };\n\n    // Calculate scale factor once image is loaded\n    const img = imageRef.current;\n    if (img.complete) {\n      calculateScaleFactor();\n    } else {\n      img.onload = calculateScaleFactor;\n    }\n\n    // Optionally, recalculate on window resize\n    window.addEventListener('resize', calculateScaleFactor);\n    return () => window.removeEventListener('resize', calculateScaleFactor);\n  }, [imagePath]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      display: 'inline-block'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      ref: imageRef,\n      src: imagePath,\n      alt: \"Annotated Invoice\",\n      style: {\n        maxWidth: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'none'\n      },\n      children: blobs.map((blob, index) => {\n        // Assuming blob.coordinates is an array [x, y, width, height]\n        const [x, y, width, height] = blob.coordinates;\n        const scaledX = x * scaleFactor;\n        const scaledY = y * scaleFactor;\n        const scaledWidth = width * scaleFactor;\n        const scaledHeight = height * scaleFactor;\n        return /*#__PURE__*/_jsxDEV(\"rect\", {\n          x: scaledX,\n          y: scaledY,\n          width: scaledWidth,\n          height: scaledHeight,\n          fill: \"none\",\n          stroke: \"red\",\n          strokeWidth: \"2\",\n          style: {\n            pointerEvents: 'all'\n          },\n          onClick: () => console.log(`Box ${index} clicked`)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(InteractiveAnnotatedImage, \"C0zz6AuGgoagwgcOFV4MKA7hTOI=\");\n_c = InteractiveAnnotatedImage;\nexport default InteractiveAnnotatedImage;\nvar _c;\n$RefreshReg$(_c, \"InteractiveAnnotatedImage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","InteractiveAnnotatedImage","imagePath","blobs","_s","imageRef","scaleFactor","setScaleFactor","calculateScaleFactor","naturalWidth","current","displayWidth","clientWidth","img","complete","onload","window","addEventListener","removeEventListener","style","position","display","children","ref","src","alt","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","top","left","width","height","pointerEvents","map","blob","index","x","y","coordinates","scaledX","scaledY","scaledWidth","scaledHeight","fill","stroke","strokeWidth","onClick","console","log","_c","$RefreshReg$"],"sources":["C:/Users/jason/audit-software-frontend/src/InteractiveAnnotatedImage.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\nfunction InteractiveAnnotatedImage({ imagePath, blobs }) {\r\n  const imageRef = useRef(null);\r\n  const [scaleFactor, setScaleFactor] = useState(1);\r\n\r\n  useEffect(() => {\r\n    const calculateScaleFactor = () => {\r\n      const naturalWidth = imageRef.current.naturalWidth;\r\n      const displayWidth = imageRef.current.clientWidth;\r\n      if (naturalWidth > 0) {\r\n        setScaleFactor(displayWidth / naturalWidth);\r\n      }\r\n    };\r\n\r\n    // Calculate scale factor once image is loaded\r\n    const img = imageRef.current;\r\n    if (img.complete) {\r\n      calculateScaleFactor();\r\n    } else {\r\n      img.onload = calculateScaleFactor;\r\n    }\r\n\r\n    // Optionally, recalculate on window resize\r\n    window.addEventListener('resize', calculateScaleFactor);\r\n    return () => window.removeEventListener('resize', calculateScaleFactor);\r\n  }, [imagePath]);\r\n\r\n  return (\r\n    <div style={{ position: 'relative', display: 'inline-block' }}>\r\n      <img ref={imageRef} src={imagePath} alt=\"Annotated Invoice\" style={{ maxWidth: '100%' }} />\r\n      <svg style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', pointerEvents: 'none' }}>\r\n        {blobs.map((blob, index) => {\r\n          // Assuming blob.coordinates is an array [x, y, width, height]\r\n          const [x, y, width, height] = blob.coordinates;\r\n          const scaledX = x * scaleFactor;\r\n          const scaledY = y * scaleFactor;\r\n          const scaledWidth = width * scaleFactor;\r\n          const scaledHeight = height * scaleFactor;\r\n\r\n          return (\r\n            <rect key={index} x={scaledX} y={scaledY} width={scaledWidth} height={scaledHeight}\r\n              fill=\"none\" stroke=\"red\" strokeWidth=\"2\"\r\n              style={{ pointerEvents: 'all' }} onClick={() => console.log(`Box ${index} clicked`)} />\r\n          );\r\n        })}\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InteractiveAnnotatedImage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}