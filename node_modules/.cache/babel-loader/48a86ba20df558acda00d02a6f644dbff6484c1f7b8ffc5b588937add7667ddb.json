{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\audit-software-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport UploadForm from './UploadForm';\nimport FetchAnnouncementsForm from './FetchAnnouncementsForm';\nimport DirectoryInputForm from './DirectoryInputForm';\nimport InteractiveAnnotatedImage from './InteractiveAnnotatedImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [processedImageInfo, setProcessedImageInfo] = useState({\n    filename: '',\n    blobs: []\n  });\n  const [selectedPairs, setSelectedPairs] = useState([]);\n  const handleDirectorySubmit = async directoryPath => {\n    try {\n      // Adjust the endpoint as necessary. This should match your Flask route.\n      const response = await axios.post('/process-directory', {\n        directory: directoryPath\n      });\n      // Assuming the response contains both the filename and blobs data\n      // Update this according to the actual structure of your response\n      // Assuming your Flask endpoint now also returns merged texts along with blobs\n      const {\n        filename,\n        blobs,\n        mergedTexts\n      } = response.data;\n      setProcessedImageInfo({\n        filename,\n        blobs,\n        mergedTexts\n      }); // Update state with filename, blobs, and mergedTexts\n    } catch (error) {\n      console.error(\"Error processing directory:\", error);\n    }\n  };\n  const processedImagePath = processedImageInfo.filename ? `/processed-images/${processedImageInfo.filename}` : '';\n  console.log(\"Processed Image Path:\", processedImagePath);\n  console.log(\"Processed Image Info:\", processedImageInfo);\n  console.log(\"Selected Pairs:\", selectedPairs);\n  console.log(\"Blobs:\", processedImageInfo.blobs);\n  console.log(\"Merged Texts:\", processedImageInfo.mergedTexts);\n  const handleProcessSelection = async () => {\n    // Assuming `selectedPairs` contains the indexes of selected pairs,\n    // and `processedImageInfo.blobs` contains the blobs data\n    try {\n      const response = await axios.post('/process-selected-pairs', {\n        selectedPairs,\n        blobs: processedImageInfo.blobs\n      });\n      console.log(response.data); // Handle response as needed\n    } catch (error) {\n      console.error(\"Error sending selections:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Audit Software Interface\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UploadForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FetchAnnouncementsForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DirectoryInputForm, {\n      onDirectorySubmit: handleDirectorySubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), processedImageInfo.filename && /*#__PURE__*/_jsxDEV(InteractiveAnnotatedImage, {\n      imagePath: `/processed-images/${processedImageInfo.filename}`,\n      blobs: processedImageInfo.blobs,\n      mergedTexts: processedImageInfo.mergedTexts,\n      onSelectionComplete: setSelectedPairs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleProcessSelection,\n      children: \"Process Selections\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"1CNeuEkU961ka+aCFiQ1gnh8IdU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","UploadForm","FetchAnnouncementsForm","DirectoryInputForm","InteractiveAnnotatedImage","jsxDEV","_jsxDEV","App","_s","processedImageInfo","setProcessedImageInfo","filename","blobs","selectedPairs","setSelectedPairs","handleDirectorySubmit","directoryPath","response","post","directory","mergedTexts","data","error","console","processedImagePath","log","handleProcessSelection","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDirectorySubmit","imagePath","onSelectionComplete","onClick","_c","$RefreshReg$"],"sources":["C:/Users/jason/audit-software-frontend/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport UploadForm from './UploadForm';\nimport FetchAnnouncementsForm from './FetchAnnouncementsForm';\nimport DirectoryInputForm from './DirectoryInputForm';\nimport InteractiveAnnotatedImage from './InteractiveAnnotatedImage';\n\nfunction App() {\n    const [processedImageInfo, setProcessedImageInfo] = useState({ filename: '', blobs: [] });\n    const [selectedPairs, setSelectedPairs] = useState([]);\n\n\n    const handleDirectorySubmit = async (directoryPath) => {\n        try {\n            // Adjust the endpoint as necessary. This should match your Flask route.\n            const response = await axios.post('/process-directory', { directory: directoryPath });\n            // Assuming the response contains both the filename and blobs data\n            // Update this according to the actual structure of your response\n            // Assuming your Flask endpoint now also returns merged texts along with blobs\n            const { filename, blobs, mergedTexts } = response.data; \n            setProcessedImageInfo({ filename, blobs, mergedTexts }); // Update state with filename, blobs, and mergedTexts\n        } catch (error) {\n            console.error(\"Error processing directory:\", error);\n        }\n    };\n\n    const processedImagePath = processedImageInfo.filename ? `/processed-images/${processedImageInfo.filename}` : '';\n    console.log(\"Processed Image Path:\", processedImagePath);\n    console.log(\"Processed Image Info:\", processedImageInfo);\n    \n    console.log(\"Selected Pairs:\", selectedPairs);\n    console.log(\"Blobs:\", processedImageInfo.blobs);\n    console.log(\"Merged Texts:\", processedImageInfo.mergedTexts);\n\n    const handleProcessSelection = async () => {\n        // Assuming `selectedPairs` contains the indexes of selected pairs,\n        // and `processedImageInfo.blobs` contains the blobs data\n        try {\n            const response = await axios.post('/process-selected-pairs', {\n                selectedPairs,\n                blobs: processedImageInfo.blobs,\n            });\n            console.log(response.data); // Handle response as needed\n        } catch (error) {\n            console.error(\"Error sending selections:\", error);\n        }\n    };\n    \n    \n    return (\n        <div className=\"App\">\n            <h1>Audit Software Interface</h1>\n            <UploadForm />\n            <FetchAnnouncementsForm />\n            <DirectoryInputForm onDirectorySubmit={handleDirectorySubmit} />\n            {processedImageInfo.filename && (\n                <InteractiveAnnotatedImage\n                    imagePath={`/processed-images/${processedImageInfo.filename}`}\n                    blobs={processedImageInfo.blobs}\n                    mergedTexts={processedImageInfo.mergedTexts}\n                    onSelectionComplete={setSelectedPairs}\n                />\n            )}\n            <button onClick={handleProcessSelection}>Process Selections</button>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}