{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\audit-software-frontend\\\\src\\\\InteractiveAnnotatedImage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport LabelVariationsModal from './LabelVariationsModal'; // Import the modal component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction InteractiveAnnotatedImage({\n  imagePath,\n  blobs,\n  onSelectionComplete,\n  onLabelVariationsUpdate\n}) {\n  _s();\n  const imageRef = useRef(null);\n  const [scaleFactor, setScaleFactor] = useState(1);\n  const [selectedPairs, setSelectedPairs] = useState([]);\n  const [currentPair, setCurrentPair] = useState([]);\n  const [selectionCount, setSelectionCount] = useState({});\n  const [isVariationsModalOpen, setIsVariationsModalOpen] = useState(false);\n  const [currentLabelIndex, setCurrentLabelIndex] = useState(null); // Track the current label for variations\n  const [labelVariations, setLabelVariations] = useState({}); // Store label variations\n\n  // This function might be triggered when a pair is fully selected\n  const openLabelVariationsModal = labelIndex => {\n    setCurrentLabelIndex(labelIndex);\n    setIsVariationsModalOpen(true);\n  };\n  // Include a mechanism to update label variations upon selecting a pair\n  // useEffect(() => {\n  //   if (currentPair.length === 2) {\n  //     const labelIndex = currentPair[0];\n  //     const promptVariations = window.prompt(\"Enter any variations for this label, separated by commas:\");\n  //     const variations = promptVariations ? promptVariations.split(',').map(variation => variation.trim()) : [];\n  //     setLabelVariations(prev => ({ ...prev, [labelIndex]: variations }));\n  //   }\n  // }, [currentPair.length === 2]);\n\n  useEffect(() => {\n    onSelectionComplete(selectedPairs);\n    // Only call onLabelVariationsUpdate if it's defined\n    if (onLabelVariationsUpdate) {\n      onLabelVariationsUpdate(labelVariations); // Update parent component with label variations\n    }\n  }, [selectedPairs, labelVariations, onSelectionComplete, onLabelVariationsUpdate]);\n  useEffect(() => {\n    const calculateScaleFactor = () => {\n      if (imageRef.current) {\n        const naturalWidth = imageRef.current.naturalWidth;\n        const displayWidth = imageRef.current.clientWidth;\n        if (naturalWidth && displayWidth) {\n          setScaleFactor(displayWidth / naturalWidth);\n        }\n      }\n    };\n    if (imageRef.current) {\n      if (imageRef.current.complete) {\n        calculateScaleFactor();\n      } else {\n        imageRef.current.onload = calculateScaleFactor;\n      }\n    }\n    window.addEventListener('resize', calculateScaleFactor);\n    return () => window.removeEventListener('resize', calculateScaleFactor);\n  }, [imagePath]);\n  useEffect(() => {\n    onSelectionComplete(selectedPairs);\n  }, [selectedPairs, onSelectionComplete]);\n  const addSelection = index => {\n    if (selectionCount[index] >= 2) return;\n    const updatedCurrentPair = [...currentPair, index];\n    const updatedSelectionCount = {\n      ...selectionCount,\n      [index]: (selectionCount[index] || 0) + 1\n    };\n    if (updatedCurrentPair.length === 2) {\n      setSelectedPairs([...selectedPairs, updatedCurrentPair]);\n      setCurrentPair([]);\n    } else {\n      setCurrentPair(updatedCurrentPair);\n    }\n    setSelectionCount(updatedSelectionCount);\n\n    // Check if a pair has just been completed\n    if (updatedCurrentPair.length === 2) {\n      // Assuming the first item is the label index\n      openLabelVariationsModal(updatedCurrentPair[0]);\n    }\n  };\n  const undoSelection = () => {\n    let lastSelectedIndex;\n    if (currentPair.length > 0) {\n      lastSelectedIndex = currentPair.pop();\n      setCurrentPair([...currentPair]);\n    } else if (selectedPairs.length > 0) {\n      const lastPair = selectedPairs[selectedPairs.length - 1];\n      lastSelectedIndex = lastPair.pop();\n      if (lastPair.length === 0) {\n        selectedPairs.pop();\n      } else {\n        selectedPairs[selectedPairs.length - 1] = lastPair;\n      }\n      setSelectedPairs([...selectedPairs]);\n    }\n    if (lastSelectedIndex !== undefined) {\n      const updatedSelectionCount = {\n        ...selectionCount\n      };\n      if (updatedSelectionCount[lastSelectedIndex] > 0) {\n        updatedSelectionCount[lastSelectedIndex]--;\n      }\n      setSelectionCount(updatedSelectionCount);\n    }\n  };\n  const getLabel = index => {\n    const occurrences = selectedPairs.flat().filter(i => i === index).length + (currentPair.includes(index) ? 1 : 0);\n    let label = '';\n    selectedPairs.forEach((pair, pairIndex) => {\n      pair.forEach((elementIndex, elementPosition) => {\n        if (elementIndex === index) {\n          label += `${pairIndex + 1}${elementPosition === 0 ? 'A' : 'B'} `;\n        }\n      });\n    });\n    if (currentPair.includes(index) && occurrences < 2) {\n      label += `${selectedPairs.length + 1}A `;\n    }\n    return label.trim();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        display: 'inline-block'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: undoSelection,\n        style: {\n          position: 'absolute',\n          right: 0,\n          top: 0,\n          zIndex: 10\n        },\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        ref: imageRef,\n        src: imagePath,\n        alt: \"Annotated Invoice\",\n        style: {\n          maxWidth: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%'\n        },\n        children: blobs.map((blob, index) => {\n          const [x, y, width, height] = blob.coordinates.map(coord => coord * scaleFactor);\n          const isSelected = selectedPairs.flat().includes(index) || currentPair.includes(index);\n          const label = getLabel(index);\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            onClick: () => addSelection(index),\n            children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n              x: x,\n              y: y,\n              width: width,\n              height: height,\n              fill: \"none\",\n              stroke: isSelected ? 'blue' : 'red',\n              strokeWidth: \"2\",\n              style: {\n                pointerEvents: 'all',\n                cursor: 'pointer'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 15\n            }, this), label && /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x + 5,\n              y: y + 20,\n              fill: \"blue\",\n              fontSize: \"15\",\n              style: {\n                pointerEvents: 'none'\n              },\n              children: label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }, this), isVariationsModalOpen && /*#__PURE__*/_jsxDEV(LabelVariationsModal, {\n      isOpen: isVariationsModalOpen,\n      onSave: variations => {\n        // Update labelVariations state with the new variations for the currentLabelIndex\n        setLabelVariations(prev => ({\n          ...prev,\n          [currentLabelIndex]: variations\n        }));\n        setIsVariationsModalOpen(false); // Close the modal\n      },\n      onCancel: () => setIsVariationsModalOpen(false) // Close the modal without saving\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(InteractiveAnnotatedImage, \"c4MYwyaLiY2NgVFuX3WrxYNuboM=\");\n_c = InteractiveAnnotatedImage;\nexport default InteractiveAnnotatedImage;\nvar _c;\n$RefreshReg$(_c, \"InteractiveAnnotatedImage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","LabelVariationsModal","jsxDEV","_jsxDEV","Fragment","_Fragment","InteractiveAnnotatedImage","imagePath","blobs","onSelectionComplete","onLabelVariationsUpdate","_s","imageRef","scaleFactor","setScaleFactor","selectedPairs","setSelectedPairs","currentPair","setCurrentPair","selectionCount","setSelectionCount","isVariationsModalOpen","setIsVariationsModalOpen","currentLabelIndex","setCurrentLabelIndex","labelVariations","setLabelVariations","openLabelVariationsModal","labelIndex","calculateScaleFactor","current","naturalWidth","displayWidth","clientWidth","complete","onload","window","addEventListener","removeEventListener","addSelection","index","updatedCurrentPair","updatedSelectionCount","length","undoSelection","lastSelectedIndex","pop","lastPair","undefined","getLabel","occurrences","flat","filter","i","includes","label","forEach","pair","pairIndex","elementIndex","elementPosition","trim","children","style","position","display","onClick","right","top","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","ref","src","alt","maxWidth","left","width","height","map","blob","x","y","coordinates","coord","isSelected","fill","stroke","strokeWidth","pointerEvents","cursor","fontSize","isOpen","onSave","variations","prev","onCancel","_c","$RefreshReg$"],"sources":["C:/Users/jason/audit-software-frontend/src/InteractiveAnnotatedImage.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport LabelVariationsModal from './LabelVariationsModal'; // Import the modal component\r\n\r\nfunction InteractiveAnnotatedImage({ imagePath, blobs, onSelectionComplete,  onLabelVariationsUpdate }) {\r\n  const imageRef = useRef(null);\r\n  const [scaleFactor, setScaleFactor] = useState(1);\r\n  const [selectedPairs, setSelectedPairs] = useState([]);\r\n  const [currentPair, setCurrentPair] = useState([]);\r\n  const [selectionCount, setSelectionCount] = useState({});\r\n  const [isVariationsModalOpen, setIsVariationsModalOpen] = useState(false);\r\n  const [currentLabelIndex, setCurrentLabelIndex] = useState(null); // Track the current label for variations\r\n  const [labelVariations, setLabelVariations] = useState({}); // Store label variations\r\n  \r\n  // This function might be triggered when a pair is fully selected\r\n  const openLabelVariationsModal = (labelIndex) => {\r\n    setCurrentLabelIndex(labelIndex);\r\n    setIsVariationsModalOpen(true);\r\n};\r\n  // Include a mechanism to update label variations upon selecting a pair\r\n  // useEffect(() => {\r\n  //   if (currentPair.length === 2) {\r\n  //     const labelIndex = currentPair[0];\r\n  //     const promptVariations = window.prompt(\"Enter any variations for this label, separated by commas:\");\r\n  //     const variations = promptVariations ? promptVariations.split(',').map(variation => variation.trim()) : [];\r\n  //     setLabelVariations(prev => ({ ...prev, [labelIndex]: variations }));\r\n  //   }\r\n  // }, [currentPair.length === 2]);\r\n\r\n  useEffect(() => {\r\n    onSelectionComplete(selectedPairs);\r\n    // Only call onLabelVariationsUpdate if it's defined\r\n    if (onLabelVariationsUpdate) {\r\n      onLabelVariationsUpdate(labelVariations); // Update parent component with label variations\r\n    }\r\n  }, [selectedPairs, labelVariations, onSelectionComplete, onLabelVariationsUpdate]);\r\n\r\n  useEffect(() => {\r\n    const calculateScaleFactor = () => {\r\n      if (imageRef.current) {\r\n        const naturalWidth = imageRef.current.naturalWidth;\r\n        const displayWidth = imageRef.current.clientWidth;\r\n        if (naturalWidth && displayWidth) {\r\n          setScaleFactor(displayWidth / naturalWidth);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (imageRef.current) {\r\n      if (imageRef.current.complete) {\r\n        calculateScaleFactor();\r\n      } else {\r\n        imageRef.current.onload = calculateScaleFactor;\r\n      }\r\n    }\r\n\r\n    window.addEventListener('resize', calculateScaleFactor);\r\n    return () => window.removeEventListener('resize', calculateScaleFactor);\r\n  }, [imagePath]);\r\n\r\n  useEffect(() => {\r\n    onSelectionComplete(selectedPairs);\r\n  }, [selectedPairs, onSelectionComplete]);\r\n\r\n  const addSelection = (index) => {\r\n    if (selectionCount[index] >= 2) return;\r\n\r\n    const updatedCurrentPair = [...currentPair, index];\r\n    const updatedSelectionCount = { ...selectionCount, [index]: (selectionCount[index] || 0) + 1 };\r\n\r\n    if (updatedCurrentPair.length === 2) {\r\n      setSelectedPairs([...selectedPairs, updatedCurrentPair]);\r\n      setCurrentPair([]);\r\n    } else {\r\n      setCurrentPair(updatedCurrentPair);\r\n    }\r\n    setSelectionCount(updatedSelectionCount);\r\n\r\n    // Check if a pair has just been completed\r\n    if (updatedCurrentPair.length === 2) {\r\n      // Assuming the first item is the label index\r\n      openLabelVariationsModal(updatedCurrentPair[0]);\r\n    }\r\n  };\r\n\r\n  const undoSelection = () => {\r\n    let lastSelectedIndex;\r\n    if (currentPair.length > 0) {\r\n      lastSelectedIndex = currentPair.pop();\r\n      setCurrentPair([...currentPair]);\r\n    } else if (selectedPairs.length > 0) {\r\n      const lastPair = selectedPairs[selectedPairs.length - 1];\r\n      lastSelectedIndex = lastPair.pop();\r\n      if (lastPair.length === 0) {\r\n        selectedPairs.pop();\r\n      } else {\r\n        selectedPairs[selectedPairs.length - 1] = lastPair;\r\n      }\r\n      setSelectedPairs([...selectedPairs]);\r\n    }\r\n\r\n    if (lastSelectedIndex !== undefined) {\r\n      const updatedSelectionCount = { ...selectionCount };\r\n      if (updatedSelectionCount[lastSelectedIndex] > 0) {\r\n        updatedSelectionCount[lastSelectedIndex]--;\r\n      }\r\n      setSelectionCount(updatedSelectionCount);\r\n    }\r\n  };\r\n\r\n  const getLabel = (index) => {\r\n    const occurrences = selectedPairs.flat().filter(i => i === index).length + (currentPair.includes(index) ? 1 : 0);\r\n    let label = '';\r\n\r\n    selectedPairs.forEach((pair, pairIndex) => {\r\n      pair.forEach((elementIndex, elementPosition) => {\r\n        if (elementIndex === index) {\r\n          label += `${pairIndex + 1}${elementPosition === 0 ? 'A' : 'B'} `;\r\n        }\r\n      });\r\n    });\r\n\r\n    if (currentPair.includes(index) && occurrences < 2) {\r\n      label += `${selectedPairs.length + 1}A `;\r\n    }\r\n\r\n    return label.trim();\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <div style={{ position: 'relative', display: 'inline-block' }}>\r\n      <button onClick={undoSelection} style={{ position: 'absolute', right: 0, top: 0, zIndex: 10 }}>Undo</button>\r\n      <img ref={imageRef} src={imagePath} alt=\"Annotated Invoice\" style={{ maxWidth: '100%' }} />\r\n      <svg style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\r\n        {blobs.map((blob, index) => {\r\n          const [x, y, width, height] = blob.coordinates.map(coord => coord * scaleFactor);\r\n          const isSelected = selectedPairs.flat().includes(index) || currentPair.includes(index);\r\n          const label = getLabel(index);\r\n\r\n          return (\r\n            <g key={index} onClick={() => addSelection(index)}>\r\n              <rect\r\n                x={x} y={y} width={width} height={height}\r\n                fill=\"none\" stroke={isSelected ? 'blue' : 'red'} strokeWidth=\"2\"\r\n                style={{ pointerEvents: 'all', cursor: 'pointer' }}\r\n              />\r\n              {label && (\r\n                <text\r\n                  x={x + 5} y={y + 20}\r\n                  fill=\"blue\" fontSize=\"15\"\r\n                  style={{ pointerEvents: 'none' }}\r\n                >\r\n                  {label}\r\n                </text>\r\n              )}\r\n            </g>\r\n\r\n          );\r\n        })}\r\n      </svg>\r\n\r\n    </div>\r\n    {isVariationsModalOpen && (\r\n      <LabelVariationsModal\r\n        isOpen={isVariationsModalOpen}\r\n        onSave={(variations) => {\r\n          // Update labelVariations state with the new variations for the currentLabelIndex\r\n          setLabelVariations(prev => ({ ...prev, [currentLabelIndex]: variations }));\r\n          setIsVariationsModalOpen(false); // Close the modal\r\n        }}\r\n        onCancel={() => setIsVariationsModalOpen(false)} // Close the modal without saving\r\n      />\r\n    )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default InteractiveAnnotatedImage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}