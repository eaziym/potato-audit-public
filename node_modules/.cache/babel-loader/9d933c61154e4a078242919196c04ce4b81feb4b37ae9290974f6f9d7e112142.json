{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\audit-software-frontend\\\\src\\\\LabelVariationsModal.js\",\n  _s = $RefreshSig$();\n// LabelVariationsModal.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LabelVariationsModal({\n  isOpen,\n  onSave,\n  onCancel\n}) {\n  _s();\n  const [variations, setVariations] = useState('');\n  const handleSave = () => {\n    onSave(variations.split(',').map(v => v.trim()));\n    setVariations(''); // Reset for next use\n  };\n  const handleModalClick = e => {\n    e.stopPropagation(); // Prevents click inside the modal from closing it\n  };\n  if (!isOpen) return null;\n\n  // The conditional rendering here checks if isOpen is true. If so, it renders the modal\n  return isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    onClick: onCancel,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      onClick: handleModalClick,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: variations,\n        onChange: e => setVariations(e.target.value),\n        placeholder: \"Enter field label variations, separated by commas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this) : null; // If isOpen is false, nothing is rendered\n}\n_s(LabelVariationsModal, \"8Y7i+clTlDPdoEkavaTlegDi098=\");\n_c = LabelVariationsModal;\nexport default LabelVariationsModal;\nvar _c;\n$RefreshReg$(_c, \"LabelVariationsModal\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","LabelVariationsModal","isOpen","onSave","onCancel","_s","variations","setVariations","handleSave","split","map","v","trim","handleModalClick","e","stopPropagation","className","onClick","children","type","value","onChange","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/jason/audit-software-frontend/src/LabelVariationsModal.js"],"sourcesContent":["// LabelVariationsModal.js\r\nimport React, { useState } from 'react';\r\n\r\nfunction LabelVariationsModal({ isOpen, onSave, onCancel }) {\r\n    const [variations, setVariations] = useState('');\r\n\r\n    const handleSave = () => {\r\n        onSave(variations.split(',').map(v => v.trim()));\r\n        setVariations(''); // Reset for next use\r\n    };\r\n    const handleModalClick = (e) => {\r\n        e.stopPropagation(); // Prevents click inside the modal from closing it\r\n      };\r\n\r\n    if (!isOpen) return null;\r\n\r\n    // The conditional rendering here checks if isOpen is true. If so, it renders the modal\r\n    return isOpen ? (\r\n        <div className=\"modal-overlay\" onClick={onCancel}>\r\n            <div className=\"modal\" onClick={handleModalClick}>  \r\n                <input\r\n                    type=\"text\"\r\n                    value={variations}\r\n                    onChange={(e) => setVariations(e.target.value)}\r\n                    placeholder=\"Enter field label variations, separated by commas\"\r\n                />\r\n                <button onClick={handleSave}>Save</button>\r\n                <button onClick={onCancel}>Cancel</button>\r\n            </div>\r\n        </div>\r\n    ) : null; // If isOpen is false, nothing is rendered\r\n}\r\n\r\nexport default LabelVariationsModal;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,oBAAoBA,CAAC;EAAEC,MAAM;EAAEC,MAAM;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACxD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMU,UAAU,GAAGA,CAAA,KAAM;IACrBL,MAAM,CAACG,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChDL,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;EACvB,CAAC;EACD,MAAMM,gBAAgB,GAAIC,CAAC,IAAK;IAC5BA,CAAC,CAACC,eAAe,CAAC,CAAC,CAAC,CAAC;EACvB,CAAC;EAEH,IAAI,CAACb,MAAM,EAAE,OAAO,IAAI;;EAExB;EACA,OAAOA,MAAM,gBACTF,OAAA;IAAKgB,SAAS,EAAC,eAAe;IAACC,OAAO,EAAEb,QAAS;IAAAc,QAAA,eAC7ClB,OAAA;MAAKgB,SAAS,EAAC,OAAO;MAACC,OAAO,EAAEJ,gBAAiB;MAAAK,QAAA,gBAC7ClB,OAAA;QACImB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEd,UAAW;QAClBe,QAAQ,EAAGP,CAAC,IAAKP,aAAa,CAACO,CAAC,CAACQ,MAAM,CAACF,KAAK,CAAE;QAC/CG,WAAW,EAAC;MAAmD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE,CAAC,eACF3B,OAAA;QAAQiB,OAAO,EAAET,UAAW;QAAAU,QAAA,EAAC;MAAI;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC1C3B,OAAA;QAAQiB,OAAO,EAAEb,QAAS;QAAAc,QAAA,EAAC;MAAM;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC,GACN,IAAI,CAAC,CAAC;AACd;AAACtB,EAAA,CA5BQJ,oBAAoB;AAAA2B,EAAA,GAApB3B,oBAAoB;AA8B7B,eAAeA,oBAAoB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}