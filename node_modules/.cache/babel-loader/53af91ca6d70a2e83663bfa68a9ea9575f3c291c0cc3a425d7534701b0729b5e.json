{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\audit-software-frontend\\\\src\\\\InteractiveAnnotatedImage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InteractiveAnnotatedImage({\n  imagePath,\n  blobs\n}) {\n  _s();\n  const [selectedPairs, setSelectedPairs] = useState([]);\n  const [currentPair, setCurrentPair] = useState([]);\n\n  // Function to handle selection of boxes\n  const addSelection = index => {\n    const updatedCurrentPair = [...currentPair, index];\n    if (updatedCurrentPair.length === 2) {\n      setSelectedPairs([...selectedPairs, updatedCurrentPair]);\n      setCurrentPair([]);\n    } else {\n      setCurrentPair(updatedCurrentPair);\n    }\n  };\n\n  // Function to send selected pairs to the backend\n  const sendPairsToBackend = async () => {\n    try {\n      const response = await axios.post('/process-selected-pairs', {\n        selectedPairs\n      });\n      console.log('Response from backend:', response.data);\n      // Handle response from backend\n    } catch (error) {\n      console.error('Error sending pairs to backend:', error);\n    }\n  };\n\n  // Helper function to check if a blob is selected\n  const isBlobSelected = index => currentPair.includes(index) || selectedPairs.flat().includes(index);\n\n  // Helper function to get label for a selected pair\n  const getLabelForPair = index => {\n    let pairIndex = selectedPairs.flat().indexOf(index);\n    if (pairIndex !== -1) {\n      return `${Math.floor(pairIndex / 2) + 1}${pairIndex % 2 === 0 ? 'A' : 'B'}`;\n    }\n    return '';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        display: 'inline-block'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: imagePath,\n        alt: \"Annotated Invoice\",\n        style: {\n          maxWidth: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          pointerEvents: 'none'\n        },\n        children: blobs.map((blob, index) => {\n          const isSelected = isBlobSelected(index);\n          const label = getLabelForPair(index);\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n              x: blob.coordinates[0],\n              y: blob.coordinates[1],\n              width: blob.coordinates[2],\n              height: blob.coordinates[3],\n              fill: \"none\",\n              stroke: isSelected ? 'blue' : 'red',\n              strokeWidth: \"2\",\n              pointerEvents: \"all\" // Enable pointer events for rect\n              ,\n              onClick: () => addSelection(index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this), isSelected && /*#__PURE__*/_jsxDEV(\"text\", {\n              x: blob.coordinates[0] + 5,\n              y: blob.coordinates[1] + 20,\n              fill: \"blue\",\n              fontSize: \"15\",\n              pointerEvents: \"all\" // Enable pointer events for text\n              ,\n              onClick: () => addSelection(index),\n              children: label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendPairsToBackend,\n      style: {\n        marginTop: '10px'\n      },\n      children: \"Process Selected Pairs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(InteractiveAnnotatedImage, \"IRPbFbZTw1yntdkEQIGB0qm/JMw=\");\n_c = InteractiveAnnotatedImage;\nexport default InteractiveAnnotatedImage;\nvar _c;\n$RefreshReg$(_c, \"InteractiveAnnotatedImage\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","InteractiveAnnotatedImage","imagePath","blobs","_s","selectedPairs","setSelectedPairs","currentPair","setCurrentPair","addSelection","index","updatedCurrentPair","length","sendPairsToBackend","response","post","console","log","data","error","isBlobSelected","includes","flat","getLabelForPair","pairIndex","indexOf","Math","floor","children","style","position","display","src","alt","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","top","left","width","height","pointerEvents","map","blob","isSelected","label","x","coordinates","y","fill","stroke","strokeWidth","onClick","fontSize","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/jason/audit-software-frontend/src/InteractiveAnnotatedImage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction InteractiveAnnotatedImage({ imagePath, blobs }) {\r\n  const [selectedPairs, setSelectedPairs] = useState([]);\r\n  const [currentPair, setCurrentPair] = useState([]);\r\n\r\n  // Function to handle selection of boxes\r\n  const addSelection = (index) => {\r\n    const updatedCurrentPair = [...currentPair, index];\r\n    if (updatedCurrentPair.length === 2) {\r\n      setSelectedPairs([...selectedPairs, updatedCurrentPair]);\r\n      setCurrentPair([]);\r\n    } else {\r\n      setCurrentPair(updatedCurrentPair);\r\n    }\r\n  };\r\n\r\n  // Function to send selected pairs to the backend\r\n  const sendPairsToBackend = async () => {\r\n    try {\r\n      const response = await axios.post('/process-selected-pairs', { selectedPairs });\r\n      console.log('Response from backend:', response.data);\r\n      // Handle response from backend\r\n    } catch (error) {\r\n      console.error('Error sending pairs to backend:', error);\r\n    }\r\n  };\r\n\r\n  // Helper function to check if a blob is selected\r\n  const isBlobSelected = (index) => currentPair.includes(index) || selectedPairs.flat().includes(index);\r\n\r\n  // Helper function to get label for a selected pair\r\n  const getLabelForPair = (index) => {\r\n    let pairIndex = selectedPairs.flat().indexOf(index);\r\n    if (pairIndex !== -1) {\r\n      return `${Math.floor(pairIndex / 2) + 1}${pairIndex % 2 === 0 ? 'A' : 'B'}`;\r\n    }\r\n    return '';\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ position: 'relative', display: 'inline-block' }}>\r\n        <img src={imagePath} alt=\"Annotated Invoice\" style={{ maxWidth: '100%' }} />\r\n        <svg style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', pointerEvents: 'none' }}>\r\n          {blobs.map((blob, index) => {\r\n            const isSelected = isBlobSelected(index);\r\n            const label = getLabelForPair(index);\r\n\r\n            return (\r\n              <g key={index}>\r\n                <rect\r\n                  x={blob.coordinates[0]}\r\n                  y={blob.coordinates[1]}\r\n                  width={blob.coordinates[2]}\r\n                  height={blob.coordinates[3]}\r\n                  fill=\"none\"\r\n                  stroke={isSelected ? 'blue' : 'red'}\r\n                  strokeWidth=\"2\"\r\n                  pointerEvents=\"all\" // Enable pointer events for rect\r\n                  onClick={() => addSelection(index)}\r\n                />\r\n                {isSelected && (\r\n                  <text\r\n                    x={blob.coordinates[0] + 5}\r\n                    y={blob.coordinates[1] + 20}\r\n                    fill=\"blue\"\r\n                    fontSize=\"15\"\r\n                    pointerEvents=\"all\" // Enable pointer events for text\r\n                    onClick={() => addSelection(index)}\r\n                  >\r\n                    {label}\r\n                  </text>\r\n                )}\r\n              </g>\r\n            );\r\n          })}\r\n        </svg>\r\n      </div>\r\n      <button onClick={sendPairsToBackend} style={{ marginTop: '10px' }}>\r\n        Process Selected Pairs\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InteractiveAnnotatedImage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}