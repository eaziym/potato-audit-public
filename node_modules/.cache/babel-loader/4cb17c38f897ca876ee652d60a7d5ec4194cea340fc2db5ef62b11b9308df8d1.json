{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\audit-software-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport UploadForm from './UploadForm';\nimport FetchAnnouncementsForm from './FetchAnnouncementsForm';\nimport DirectoryInputForm from './DirectoryInputForm';\nimport InteractiveAnnotatedImage from './InteractiveAnnotatedImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [processedImageInfo, setProcessedImageInfo] = useState({\n    filename: '',\n    blobs: []\n  });\n  const handleDirectorySubmit = async directoryPath => {\n    try {\n      // Adjust the endpoint as necessary. This should match your Flask route.\n      const response = await axios.post('/process-directory', {\n        directory: directoryPath\n      });\n      // Assuming the response contains both the filename and blobs data\n      // Update this according to the actual structure of your response\n      const {\n        filename,\n        blobs\n      } = response.data;\n      setProcessedImageInfo({\n        filename,\n        blobs\n      }); // Update state with both filename and blobs\n    } catch (error) {\n      console.error(\"Error processing directory:\", error);\n    }\n  };\n  const processedImagePath = processedImageInfo.filename ? `/processed-images/${processedImageInfo.filename}` : '';\n  console.log(\"Processed Image Path:\", processedImagePath);\n  console.log(\"Processed Image Info:\", processedImageInfo);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Audit Software Interface\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UploadForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FetchAnnouncementsForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DirectoryInputForm, {\n      onDirectorySubmit: handleDirectorySubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), processedImagePath && /*#__PURE__*/_jsxDEV(InteractiveAnnotatedImage, {\n      imagePath: processedImagePath,\n      blobs: processedImageInfo.blobs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"IEKPCKRCcMPmk3z2NIPtpcGAhj4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","UploadForm","FetchAnnouncementsForm","DirectoryInputForm","InteractiveAnnotatedImage","jsxDEV","_jsxDEV","App","_s","processedImageInfo","setProcessedImageInfo","filename","blobs","handleDirectorySubmit","directoryPath","response","post","directory","data","error","console","processedImagePath","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDirectorySubmit","imagePath","_c","$RefreshReg$"],"sources":["C:/Users/jason/audit-software-frontend/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport UploadForm from './UploadForm';\nimport FetchAnnouncementsForm from './FetchAnnouncementsForm';\nimport DirectoryInputForm from './DirectoryInputForm';\nimport InteractiveAnnotatedImage from './InteractiveAnnotatedImage';\n\nfunction App() {\n    const [processedImageInfo, setProcessedImageInfo] = useState({ filename: '', blobs: [] });\n\n    const handleDirectorySubmit = async (directoryPath) => {\n        try {\n            // Adjust the endpoint as necessary. This should match your Flask route.\n            const response = await axios.post('/process-directory', { directory: directoryPath });\n            // Assuming the response contains both the filename and blobs data\n            // Update this according to the actual structure of your response\n            const { filename, blobs } = response.data; \n            setProcessedImageInfo({ filename, blobs }); // Update state with both filename and blobs\n        } catch (error) {\n            console.error(\"Error processing directory:\", error);\n        }\n    };\n\n    const processedImagePath = processedImageInfo.filename ? `/processed-images/${processedImageInfo.filename}` : '';\n    console.log(\"Processed Image Path:\", processedImagePath);\n    console.log(\"Processed Image Info:\", processedImageInfo);\n    \n    return (\n        <div className=\"App\">\n            <h1>Audit Software Interface</h1>\n            <UploadForm />\n            <FetchAnnouncementsForm />\n            <DirectoryInputForm onDirectorySubmit={handleDirectorySubmit} />\n            {/* Render the InteractiveAnnotatedImage only if processedImagePath exists */}\n            {processedImagePath && (\n                <InteractiveAnnotatedImage imagePath={processedImagePath} blobs={processedImageInfo.blobs} />\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,sBAAsB,MAAM,0BAA0B;AAC7D,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,yBAAyB,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGX,QAAQ,CAAC;IAAEY,QAAQ,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC;EAEzF,MAAMC,qBAAqB,GAAG,MAAOC,aAAa,IAAK;IACnD,IAAI;MACA;MACA,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,oBAAoB,EAAE;QAAEC,SAAS,EAAEH;MAAc,CAAC,CAAC;MACrF;MACA;MACA,MAAM;QAAEH,QAAQ;QAAEC;MAAM,CAAC,GAAGG,QAAQ,CAACG,IAAI;MACzCR,qBAAqB,CAAC;QAAEC,QAAQ;QAAEC;MAAM,CAAC,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,OAAOO,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACvD;EACJ,CAAC;EAED,MAAME,kBAAkB,GAAGZ,kBAAkB,CAACE,QAAQ,GAAI,qBAAoBF,kBAAkB,CAACE,QAAS,EAAC,GAAG,EAAE;EAChHS,OAAO,CAACE,GAAG,CAAC,uBAAuB,EAAED,kBAAkB,CAAC;EACxDD,OAAO,CAACE,GAAG,CAAC,uBAAuB,EAAEb,kBAAkB,CAAC;EAExD,oBACIH,OAAA;IAAKiB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBlB,OAAA;MAAAkB,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjCtB,OAAA,CAACL,UAAU;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACdtB,OAAA,CAACJ,sBAAsB;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1BtB,OAAA,CAACH,kBAAkB;MAAC0B,iBAAiB,EAAEhB;IAAsB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAE/DP,kBAAkB,iBACff,OAAA,CAACF,yBAAyB;MAAC0B,SAAS,EAAET,kBAAmB;MAACT,KAAK,EAAEH,kBAAkB,CAACG;IAAM;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC/F;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACpB,EAAA,CAhCQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}