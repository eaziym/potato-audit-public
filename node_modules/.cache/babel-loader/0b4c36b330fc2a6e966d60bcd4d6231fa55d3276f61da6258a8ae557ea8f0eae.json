{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\audit-software-frontend\\\\src\\\\InteractiveAnnotatedImage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport LabelVariationsModal from './LabelVariationsModal'; // Import the modal component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction findTextForCoordinates(blobCoordinates, mergedTexts) {\n  const [x1, y1, width1, height1] = blobCoordinates;\n  for (const {\n    coordinates: [x2, y2, width2, height2],\n    text\n  } of mergedTexts) {\n    // This is a simple overlap check, you might need a more sophisticated comparison\n    if (x1 === x2 && y1 === y2 && width1 === width2 && height1 === height2) {\n      return text;\n    }\n  }\n  return null; // No matching text found\n}\nfunction InteractiveAnnotatedImage({\n  imagePath,\n  blobs,\n  mergedTexts,\n  onSelectionComplete,\n  onLabelVariationsUpdate\n}) {\n  _s();\n  const imageRef = useRef(null);\n  const [scaleFactor, setScaleFactor] = useState(1);\n  const [selectedPairs, setSelectedPairs] = useState([]);\n  const [currentPair, setCurrentPair] = useState([]);\n  const [selectionCount, setSelectionCount] = useState({});\n  const [isVariationsModalOpen, setIsVariationsModalOpen] = useState(false);\n  const [currentLabelIndex, setCurrentLabelIndex] = useState(null); // Track the current label for variations\n  const [currentLabelText, setCurrentLabelText] = useState('');\n  const [labelVariations, setLabelVariations] = useState({}); // Store label variations\n\n  // This function might be triggered when a pair is fully selected\n  const openLabelVariationsModal = labelText => {\n    setCurrentLabelText(labelText); // Set the actual text, not the index\n    setIsVariationsModalOpen(true);\n  };\n  const handleSaveVariations = (labelText, variationsArray) => {\n    // Update labelVariations state to include new variations for the labelText\n    setLabelVariations(prevVariations => ({\n      ...prevVariations,\n      [labelText]: variationsArray // Use labelText as key\n    }));\n    setIsVariationsModalOpen(false);\n  };\n  const handleCancelModal = () => {\n    setIsVariationsModalOpen(false); // Close the modal on cancel\n  };\n  useEffect(() => {\n    onSelectionComplete(selectedPairs);\n    // Only call onLabelVariationsUpdate if it's defined\n    if (onLabelVariationsUpdate) {\n      onLabelVariationsUpdate(labelVariations); // Update parent component with label variations\n    }\n  }, [selectedPairs, labelVariations, onSelectionComplete, onLabelVariationsUpdate]);\n  useEffect(() => {\n    const calculateScaleFactor = () => {\n      if (imageRef.current) {\n        const naturalWidth = imageRef.current.naturalWidth;\n        const displayWidth = imageRef.current.clientWidth;\n        if (naturalWidth && displayWidth) {\n          setScaleFactor(displayWidth / naturalWidth);\n        }\n      }\n    };\n    if (imageRef.current) {\n      if (imageRef.current.complete) {\n        calculateScaleFactor();\n      } else {\n        imageRef.current.onload = calculateScaleFactor;\n      }\n    }\n    window.addEventListener('resize', calculateScaleFactor);\n    return () => window.removeEventListener('resize', calculateScaleFactor);\n  }, [imagePath]);\n  useEffect(() => {\n    onSelectionComplete(selectedPairs);\n  }, [selectedPairs, onSelectionComplete]);\n  const addSelection = index => {\n    if (selectionCount[index] >= 2) return;\n    const updatedCurrentPair = [...currentPair, index];\n    const updatedSelectionCount = {\n      ...selectionCount,\n      [index]: (selectionCount[index] || 0) + 1\n    };\n    if (updatedCurrentPair.length === 2) {\n      setSelectedPairs([...selectedPairs, updatedCurrentPair]);\n      setCurrentPair([]);\n    } else {\n      setCurrentPair(updatedCurrentPair);\n    }\n    setSelectionCount(updatedSelectionCount);\n    if (updatedCurrentPair.length === 2) {\n      // Assuming the first item is the index for the blob\n      const blobCoordinates = blobs[updatedCurrentPair[0]].coordinates;\n      // Find the matching text for these coordinates in mergedTexts\n      const labelText = findTextForCoordinates(blobCoordinates, mergedTexts);\n      if (labelText) {\n        openLabelVariationsModal(labelText);\n      }\n    }\n  };\n  const undoSelection = () => {\n    let lastSelectedIndex;\n    if (currentPair.length > 0) {\n      lastSelectedIndex = currentPair.pop();\n      setCurrentPair([...currentPair]);\n    } else if (selectedPairs.length > 0) {\n      const lastPair = selectedPairs[selectedPairs.length - 1];\n      lastSelectedIndex = lastPair.pop();\n      if (lastPair.length === 0) {\n        selectedPairs.pop();\n      } else {\n        selectedPairs[selectedPairs.length - 1] = lastPair;\n      }\n      setSelectedPairs([...selectedPairs]);\n    }\n    if (lastSelectedIndex !== undefined) {\n      const updatedSelectionCount = {\n        ...selectionCount\n      };\n      if (updatedSelectionCount[lastSelectedIndex] > 0) {\n        updatedSelectionCount[lastSelectedIndex]--;\n      }\n      setSelectionCount(updatedSelectionCount);\n    }\n  };\n  const getLabel = index => {\n    const occurrences = selectedPairs.flat().filter(i => i === index).length + (currentPair.includes(index) ? 1 : 0);\n    let label = '';\n    selectedPairs.forEach((pair, pairIndex) => {\n      pair.forEach((elementIndex, elementPosition) => {\n        if (elementIndex === index) {\n          label += `${pairIndex + 1}${elementPosition === 0 ? 'A' : 'B'} `;\n        }\n      });\n    });\n    if (currentPair.includes(index) && occurrences < 2) {\n      label += `${selectedPairs.length + 1}A `;\n    }\n    return label.trim();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: undoSelection,\n      className: \"undo-button\",\n      children: \"Undo Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        display: 'inline-block'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        ref: imageRef,\n        src: imagePath,\n        alt: \"Annotated Invoice\",\n        style: {\n          maxWidth: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%'\n        },\n        children: blobs.map((blob, index) => {\n          const [x, y, width, height] = blob.coordinates.map(coord => coord * scaleFactor);\n          const isSelected = selectedPairs.flat().includes(index) || currentPair.includes(index);\n          const label = getLabel(index);\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            onClick: () => addSelection(index),\n            children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n              x: x,\n              y: y,\n              width: width,\n              height: height,\n              fill: \"none\",\n              stroke: isSelected ? 'blue' : 'red',\n              strokeWidth: \"2\",\n              style: {\n                pointerEvents: 'all',\n                cursor: 'pointer'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this), label && /*#__PURE__*/_jsxDEV(\"text\", {\n              x: x + 5,\n              y: y + 20,\n              fill: \"blue\",\n              fontSize: \"15\",\n              style: {\n                pointerEvents: 'none'\n              },\n              children: label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }, this), isVariationsModalOpen && /*#__PURE__*/_jsxDEV(LabelVariationsModal, {\n      isOpen: isVariationsModalOpen,\n      onSave: handleSaveVariations,\n      onCancel: handleCancelModal,\n      currentLabelText: currentLabelText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(InteractiveAnnotatedImage, \"uxbFIeFGdBvtYqmZdyW4z5ztPxA=\");\n_c = InteractiveAnnotatedImage;\nexport default InteractiveAnnotatedImage;\nvar _c;\n$RefreshReg$(_c, \"InteractiveAnnotatedImage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","LabelVariationsModal","jsxDEV","_jsxDEV","Fragment","_Fragment","findTextForCoordinates","blobCoordinates","mergedTexts","x1","y1","width1","height1","coordinates","x2","y2","width2","height2","text","InteractiveAnnotatedImage","imagePath","blobs","onSelectionComplete","onLabelVariationsUpdate","_s","imageRef","scaleFactor","setScaleFactor","selectedPairs","setSelectedPairs","currentPair","setCurrentPair","selectionCount","setSelectionCount","isVariationsModalOpen","setIsVariationsModalOpen","currentLabelIndex","setCurrentLabelIndex","currentLabelText","setCurrentLabelText","labelVariations","setLabelVariations","openLabelVariationsModal","labelText","handleSaveVariations","variationsArray","prevVariations","handleCancelModal","calculateScaleFactor","current","naturalWidth","displayWidth","clientWidth","complete","onload","window","addEventListener","removeEventListener","addSelection","index","updatedCurrentPair","updatedSelectionCount","length","undoSelection","lastSelectedIndex","pop","lastPair","undefined","getLabel","occurrences","flat","filter","i","includes","label","forEach","pair","pairIndex","elementIndex","elementPosition","trim","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","style","position","display","ref","src","alt","maxWidth","top","left","width","height","map","blob","x","y","coord","isSelected","fill","stroke","strokeWidth","pointerEvents","cursor","fontSize","isOpen","onSave","onCancel","_c","$RefreshReg$"],"sources":["C:/Users/jason/audit-software-frontend/src/InteractiveAnnotatedImage.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport LabelVariationsModal from './LabelVariationsModal'; // Import the modal component\r\n\r\nfunction findTextForCoordinates(blobCoordinates, mergedTexts) {\r\n  const [x1, y1, width1, height1] = blobCoordinates;\r\n  for (const { coordinates: [x2, y2, width2, height2], text } of mergedTexts) {\r\n      // This is a simple overlap check, you might need a more sophisticated comparison\r\n      if (x1 === x2 && y1 === y2 && width1 === width2 && height1 === height2) {\r\n          return text;\r\n      }\r\n  }\r\n  return null; // No matching text found\r\n}\r\n\r\nfunction InteractiveAnnotatedImage({ imagePath, blobs, mergedTexts, onSelectionComplete,  onLabelVariationsUpdate }) {\r\n  const imageRef = useRef(null);\r\n  const [scaleFactor, setScaleFactor] = useState(1);\r\n  const [selectedPairs, setSelectedPairs] = useState([]);\r\n  const [currentPair, setCurrentPair] = useState([]);\r\n  const [selectionCount, setSelectionCount] = useState({});\r\n  const [isVariationsModalOpen, setIsVariationsModalOpen] = useState(false);\r\n  const [currentLabelIndex, setCurrentLabelIndex] = useState(null); // Track the current label for variations\r\n  const [currentLabelText, setCurrentLabelText] = useState('');\r\n  const [labelVariations, setLabelVariations] = useState({}); // Store label variations\r\n  \r\n  // This function might be triggered when a pair is fully selected\r\n  const openLabelVariationsModal = (labelText) => {\r\n    setCurrentLabelText(labelText); // Set the actual text, not the index\r\n    setIsVariationsModalOpen(true);\r\n  };\r\n\r\n\r\n\r\n  const handleSaveVariations = (labelText, variationsArray) => {\r\n    // Update labelVariations state to include new variations for the labelText\r\n    setLabelVariations(prevVariations => ({\r\n      ...prevVariations,\r\n      [labelText]: variationsArray // Use labelText as key\r\n    }));\r\n    setIsVariationsModalOpen(false);\r\n  };\r\n\r\n  const handleCancelModal = () => {\r\n    setIsVariationsModalOpen(false); // Close the modal on cancel\r\n  };\r\n\r\n  useEffect(() => {\r\n    onSelectionComplete(selectedPairs);\r\n    // Only call onLabelVariationsUpdate if it's defined\r\n    if (onLabelVariationsUpdate) {\r\n      onLabelVariationsUpdate(labelVariations); // Update parent component with label variations\r\n    }\r\n  }, [selectedPairs, labelVariations, onSelectionComplete, onLabelVariationsUpdate]);\r\n\r\n  useEffect(() => {\r\n    const calculateScaleFactor = () => {\r\n      if (imageRef.current) {\r\n        const naturalWidth = imageRef.current.naturalWidth;\r\n        const displayWidth = imageRef.current.clientWidth;\r\n        if (naturalWidth && displayWidth) {\r\n          setScaleFactor(displayWidth / naturalWidth);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (imageRef.current) {\r\n      if (imageRef.current.complete) {\r\n        calculateScaleFactor();\r\n      } else {\r\n        imageRef.current.onload = calculateScaleFactor;\r\n      }\r\n    }\r\n\r\n    window.addEventListener('resize', calculateScaleFactor);\r\n    return () => window.removeEventListener('resize', calculateScaleFactor);\r\n  }, [imagePath]);\r\n\r\n  useEffect(() => {\r\n    onSelectionComplete(selectedPairs);\r\n  }, [selectedPairs, onSelectionComplete]);\r\n\r\n  const addSelection = (index) => {\r\n    if (selectionCount[index] >= 2) return;\r\n\r\n    const updatedCurrentPair = [...currentPair, index];\r\n    const updatedSelectionCount = { ...selectionCount, [index]: (selectionCount[index] || 0) + 1 };\r\n\r\n    if (updatedCurrentPair.length === 2) {\r\n      setSelectedPairs([...selectedPairs, updatedCurrentPair]);\r\n      setCurrentPair([]);\r\n    } else {\r\n      setCurrentPair(updatedCurrentPair);\r\n    }\r\n    setSelectionCount(updatedSelectionCount);\r\n\r\n    if (updatedCurrentPair.length === 2) {\r\n        // Assuming the first item is the index for the blob\r\n        const blobCoordinates = blobs[updatedCurrentPair[0]].coordinates;\r\n        // Find the matching text for these coordinates in mergedTexts\r\n        const labelText = findTextForCoordinates(blobCoordinates, mergedTexts);\r\n        if (labelText) {\r\n            openLabelVariationsModal(labelText);\r\n        }\r\n    }\r\n  };\r\n\r\n  const undoSelection = () => {\r\n    let lastSelectedIndex;\r\n    if (currentPair.length > 0) {\r\n      lastSelectedIndex = currentPair.pop();\r\n      setCurrentPair([...currentPair]);\r\n    } else if (selectedPairs.length > 0) {\r\n      const lastPair = selectedPairs[selectedPairs.length - 1];\r\n      lastSelectedIndex = lastPair.pop();\r\n      if (lastPair.length === 0) {\r\n        selectedPairs.pop();\r\n      } else {\r\n        selectedPairs[selectedPairs.length - 1] = lastPair;\r\n      }\r\n      setSelectedPairs([...selectedPairs]);\r\n    }\r\n\r\n    if (lastSelectedIndex !== undefined) {\r\n      const updatedSelectionCount = { ...selectionCount };\r\n      if (updatedSelectionCount[lastSelectedIndex] > 0) {\r\n        updatedSelectionCount[lastSelectedIndex]--;\r\n      }\r\n      setSelectionCount(updatedSelectionCount);\r\n    }\r\n  };\r\n\r\n  const getLabel = (index) => {\r\n    const occurrences = selectedPairs.flat().filter(i => i === index).length + (currentPair.includes(index) ? 1 : 0);\r\n    let label = '';\r\n\r\n    selectedPairs.forEach((pair, pairIndex) => {\r\n      pair.forEach((elementIndex, elementPosition) => {\r\n        if (elementIndex === index) {\r\n          label += `${pairIndex + 1}${elementPosition === 0 ? 'A' : 'B'} `;\r\n        }\r\n      });\r\n    });\r\n\r\n    if (currentPair.includes(index) && occurrences < 2) {\r\n      label += `${selectedPairs.length + 1}A `;\r\n    }\r\n\r\n    return label.trim();\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <button onClick={undoSelection} className=\"undo-button\">Undo Selection</button>\r\n\r\n    <div style={{ position: 'relative', display: 'inline-block' }}>\r\n      <img ref={imageRef} src={imagePath} alt=\"Annotated Invoice\" style={{ maxWidth: '100%' }} />\r\n      <svg style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\r\n        {blobs.map((blob, index) => {\r\n          const [x, y, width, height] = blob.coordinates.map(coord => coord * scaleFactor);\r\n          const isSelected = selectedPairs.flat().includes(index) || currentPair.includes(index);\r\n          const label = getLabel(index);\r\n\r\n          return (\r\n            <g key={index} onClick={() => addSelection(index)}>\r\n              <rect\r\n                x={x} y={y} width={width} height={height}\r\n                fill=\"none\" stroke={isSelected ? 'blue' : 'red'} strokeWidth=\"2\"\r\n                style={{ pointerEvents: 'all', cursor: 'pointer' }}\r\n              />\r\n              {label && (\r\n                <text\r\n                  x={x + 5} y={y + 20}\r\n                  fill=\"blue\" fontSize=\"15\"\r\n                  style={{ pointerEvents: 'none' }}\r\n                >\r\n                  {label}\r\n                </text>\r\n              )}\r\n            </g>\r\n\r\n          );\r\n        })}\r\n      </svg>\r\n\r\n    </div>\r\n    {isVariationsModalOpen && (\r\n      <LabelVariationsModal\r\n        isOpen={isVariationsModalOpen}\r\n        onSave={handleSaveVariations}\r\n        onCancel={handleCancelModal}\r\n        currentLabelText={currentLabelText}\r\n      />\r\n    )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default InteractiveAnnotatedImage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}