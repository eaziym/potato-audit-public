{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\audit-software-frontend\\\\src\\\\InteractiveAnnotatedImage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InteractiveAnnotatedImage({\n  imagePath,\n  blobs,\n  onSelectionComplete\n}) {\n  _s();\n  const imageRef = useRef(null);\n  const [scaleFactor, setScaleFactor] = useState(1);\n  const [selectedPairs, setSelectedPairs] = useState([]);\n  const [currentPair, setCurrentPair] = useState([]);\n  useEffect(() => {\n    // Calculate scale factor based on natural and displayed image sizes\n    const calculateScaleFactor = () => {\n      const naturalWidth = imageRef.current.naturalWidth;\n      const displayWidth = imageRef.current.clientWidth;\n      if (naturalWidth > 0) {\n        setScaleFactor(displayWidth / naturalWidth);\n      }\n    };\n\n    // Calculate scale factor once image is loaded\n    const img = imageRef.current;\n    if (img.complete) {\n      calculateScaleFactor();\n    } else {\n      img.onload = calculateScaleFactor;\n    }\n\n    // Optionally, recalculate on window resize\n    window.addEventListener('resize', calculateScaleFactor);\n    return () => window.removeEventListener('resize', calculateScaleFactor);\n  }, [imagePath]);\n  useEffect(() => {\n    // This effect is specifically for calling onSelectionComplete when selectedPairs changes\n    onSelectionComplete(selectedPairs);\n  }, [selectedPairs, onSelectionComplete]); // Correctly placed effect for handling updates to selectedPairs\n\n  // Function to handle selection of boxes\n  const addSelection = index => {\n    const updatedCurrentPair = [...currentPair, index];\n    if (updatedCurrentPair.length === 2) {\n      setSelectedPairs([...selectedPairs, updatedCurrentPair]);\n      setCurrentPair([]);\n    } else {\n      setCurrentPair(updatedCurrentPair);\n    }\n  };\n\n  // Helper function to check if a blob is selected\n  const isBlobSelected = index => currentPair.includes(index) || selectedPairs.flat().includes(index);\n\n  // Helper function to get label for a selected pair\n  const getLabelForPair = index => {\n    let pairIndex = selectedPairs.flat().indexOf(index);\n    if (pairIndex !== -1) {\n      return `${Math.floor(pairIndex / 2) + 1}${pairIndex % 2 === 0 ? 'A' : 'B'}`;\n    }\n    return '';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      display: 'inline-block'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      ref: imageRef,\n      src: imagePath,\n      alt: \"Annotated Invoice\",\n      style: {\n        maxWidth: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'none'\n      },\n      children: blobs.map((blob, index) => {\n        const [x, y, width, height] = blob.coordinates;\n        const scaledX = x * scaleFactor;\n        const scaledY = y * scaleFactor;\n        const scaledWidth = width * scaleFactor;\n        const scaledHeight = height * scaleFactor;\n        const isSelected = isBlobSelected(index);\n        const label = getLabelForPair(index);\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n            x: scaledX,\n            y: scaledY,\n            width: scaledWidth,\n            height: scaledHeight,\n            fill: \"none\",\n            stroke: isSelected ? 'blue' : 'red',\n            strokeWidth: \"2\",\n            style: {\n              pointerEvents: 'all'\n            },\n            onClick: () => addSelection(index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), isSelected && /*#__PURE__*/_jsxDEV(\"text\", {\n            x: scaledX + 5,\n            y: scaledY + 20,\n            fill: \"blue\",\n            fontSize: \"15\",\n            style: {\n              pointerEvents: 'all'\n            },\n            onClick: () => addSelection(index),\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(InteractiveAnnotatedImage, \"guX0xh86JSniVo0Ups06Z3OkblE=\");\n_c = InteractiveAnnotatedImage;\nexport default InteractiveAnnotatedImage;\nvar _c;\n$RefreshReg$(_c, \"InteractiveAnnotatedImage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","InteractiveAnnotatedImage","imagePath","blobs","onSelectionComplete","_s","imageRef","scaleFactor","setScaleFactor","selectedPairs","setSelectedPairs","currentPair","setCurrentPair","calculateScaleFactor","naturalWidth","current","displayWidth","clientWidth","img","complete","onload","window","addEventListener","removeEventListener","addSelection","index","updatedCurrentPair","length","isBlobSelected","includes","flat","getLabelForPair","pairIndex","indexOf","Math","floor","style","position","display","children","ref","src","alt","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","top","left","width","height","pointerEvents","map","blob","x","y","coordinates","scaledX","scaledY","scaledWidth","scaledHeight","isSelected","label","fill","stroke","strokeWidth","onClick","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/jason/audit-software-frontend/src/InteractiveAnnotatedImage.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\nfunction InteractiveAnnotatedImage({ imagePath, blobs, onSelectionComplete }) {\r\n  const imageRef = useRef(null);\r\n  const [scaleFactor, setScaleFactor] = useState(1);\r\n  const [selectedPairs, setSelectedPairs] = useState([]);\r\n  const [currentPair, setCurrentPair] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Calculate scale factor based on natural and displayed image sizes\r\n    const calculateScaleFactor = () => {\r\n      const naturalWidth = imageRef.current.naturalWidth;\r\n      const displayWidth = imageRef.current.clientWidth;\r\n      if (naturalWidth > 0) {\r\n        setScaleFactor(displayWidth / naturalWidth);\r\n      }\r\n    };\r\n    \r\n\r\n    // Calculate scale factor once image is loaded\r\n    const img = imageRef.current;\r\n    if (img.complete) {\r\n      calculateScaleFactor();\r\n    } else {\r\n      img.onload = calculateScaleFactor;\r\n    }\r\n\r\n    // Optionally, recalculate on window resize\r\n    window.addEventListener('resize', calculateScaleFactor);\r\n    return () => window.removeEventListener('resize', calculateScaleFactor);\r\n  }, [imagePath]);\r\n\r\n  useEffect(() => {\r\n    // This effect is specifically for calling onSelectionComplete when selectedPairs changes\r\n    onSelectionComplete(selectedPairs);\r\n  }, [selectedPairs, onSelectionComplete]); // Correctly placed effect for handling updates to selectedPairs\r\n\r\n\r\n  // Function to handle selection of boxes\r\n  const addSelection = (index) => {\r\n    const updatedCurrentPair = [...currentPair, index];\r\n    if (updatedCurrentPair.length === 2) {\r\n      setSelectedPairs([...selectedPairs, updatedCurrentPair]);\r\n      setCurrentPair([]);\r\n    } else {\r\n      setCurrentPair(updatedCurrentPair);\r\n    }\r\n  };\r\n\r\n  // Helper function to check if a blob is selected\r\n  const isBlobSelected = (index) => currentPair.includes(index) || selectedPairs.flat().includes(index);\r\n\r\n  // Helper function to get label for a selected pair\r\n  const getLabelForPair = (index) => {\r\n    let pairIndex = selectedPairs.flat().indexOf(index);\r\n    if (pairIndex !== -1) {\r\n      return `${Math.floor(pairIndex / 2) + 1}${pairIndex % 2 === 0 ? 'A' : 'B'}`;\r\n    }\r\n    return '';\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div style={{ position: 'relative', display: 'inline-block' }}>\r\n      <img ref={imageRef} src={imagePath} alt=\"Annotated Invoice\" style={{ maxWidth: '100%' }} />\r\n      <svg style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', pointerEvents: 'none' }}>\r\n        {blobs.map((blob, index) => {\r\n          const [x, y, width, height] = blob.coordinates;\r\n          const scaledX = x * scaleFactor;\r\n          const scaledY = y * scaleFactor;\r\n          const scaledWidth = width * scaleFactor;\r\n          const scaledHeight = height * scaleFactor;\r\n          const isSelected = isBlobSelected(index);\r\n          const label = getLabelForPair(index);\r\n\r\n          return (\r\n            <g key={index}>\r\n              <rect\r\n                x={scaledX} y={scaledY} width={scaledWidth} height={scaledHeight}\r\n                fill=\"none\" stroke={isSelected ? 'blue' : 'red'} strokeWidth=\"2\"\r\n                style={{ pointerEvents: 'all' }} onClick={() => addSelection(index)}\r\n              />\r\n              {isSelected && (\r\n                <text\r\n                  x={scaledX + 5} y={scaledY + 20}\r\n                  fill=\"blue\" fontSize=\"15\" style={{ pointerEvents: 'all' }}\r\n                  onClick={() => addSelection(index)}\r\n                >\r\n                  {label}\r\n                </text>\r\n              )}\r\n            </g>\r\n          );\r\n        })}\r\n      </svg>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default InteractiveAnnotatedImage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}